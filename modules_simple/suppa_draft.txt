//  ch_suppa_tpm = params.suppa_tpm ? PREPARE_GENOME.out.suppa_tpm : TX2GENE_TXIMPORT_STAR_SALMON.out.suppa_tpm

//             // Run SUPPA
//             SUPPA_STAR_SALMON (
//                 PREPARE_GENOME.out.gtf,
//                 ch_suppa_tpm,
//                 ch_samplesheet,
//                 ch_contrastsheet,
//                 params.suppa_per_local_event,
//                 params.generateevents_boundary,
//                 params.generateevents_threshold,
//                 params.generateevents_exon_length,
//                 params.generateevents_event_type,
//                 params.generateevents_pool_genes,
//                 params.psiperevent_total_filter,
//                 params.diffsplice_local_event,
//                 params.diffsplice_method,
//                 params.diffsplice_area,
//                 params.diffsplice_lower_bound,
//                 params.diffsplice_alpha,
//                 params.diffsplice_tpm_threshold,
//                 params.diffsplice_nan_threshold,
//                 params.diffsplice_gene_correction,
//                 params.diffsplice_paired,
//                 params.diffsplice_median,
//                 params.clusterevents_local_event,
//                 params.clusterevents_dpsithreshold,
//                 params.clusterevents_eps,
//                 params.clusterevents_metric,
//                 params.clusterevents_min_pts,
//                 params.clusterevents_method,
//                 params.clusterevents_sigthreshold ?: false,
//                 params.clusterevents_separation ?: false,
//                 params.suppa_per_isoform
//             )

// ch_tpm = TX2GENE_TXIMPORT_SALMON.out.suppa_tpm
// ch_gtf = PREPARE_GENOME.out.gtf

//     def output_type = ".tpm"
//     def calc_ranges = false
//     def prefix = ''
//     def file_type = ''
    
// //SPLIT_FILES_TPM (suppa_tpm.txt)
//     SPLIT_FILES_TPM (
//         ch_tpm,
//         ch_samplesheet,
//         output_type,
//         calc_ranges,
//         prefix
//     )

// //GENERATE_EVENTS_IOE (genes_chrX.gtf)


//     def file_type = 'ioe'

//     // Generate AS events on the GTF - Local events

//     GENERATE_EVENTS_IOE (
//         ch_gtf,
//         file_type,
//         generateevents_boundary,
//         generateevents_threshold,
//         generateevents_exon_length,
//         generateevents_event_type,
//         generateevents_pool_genes
//     )

// //PSIPEREVENT (suppa_tpm.txt)    
//     PSIPEREVENT (
//         GENERATE_EVENTS_IOE.out.events,
//         ch_tpm,
//         psiperevent_total_filter
//     )

// //SPLIT_FILES_IOE (suppa_local.psi)  
//         output_type = ".psi"
//         calc_ranges = true
//         prefix = "local"

//     SPLIT_FILES_IOE (
//         PSIPEREVENT.out.psi,
//         ch_samplesheet,
//         output_type,
//         calc_ranges,
//         prefix
//     )


//     ch_suppa_local_contrasts = ch_contrastsheet.splitCsv(header:true)

//     // Add TPM files to contrasts channel

//     ch_suppa_tpm_conditions = SPLIT_FILES_TPM.out.tpms
//         .flatten()
//         .map { [it.baseName, it ] }

//     ch_suppa_local_contrasts = ch_suppa_local_contrasts
//         .map { it -> [it['treatment'], it] }
//         .combine ( ch_suppa_tpm_conditions, by: 0 )
//         .map { it -> it[1] + ['tpm1': it[2]] }

//     ch_suppa_local_contrasts = ch_suppa_local_contrasts
//         .map { it -> [it['control'], it] }
//         .combine ( ch_suppa_tpm_conditions, by: 0 )
//         .map { it -> it[1] + ['tpm2': it[2]] }


//     ch_suppa_psi_conditions = SPLIT_FILES_IOE.out.psis
//         .flatten()
//         .map { [ it.baseName.toString().replaceAll("local_", ""), it ] }

//     ch_suppa_local_contrasts = ch_suppa_local_contrasts
//         .map { it -> [it['treatment'], it] }
//         .combine ( ch_suppa_psi_conditions, by: 0 )
//         .map { it -> it[1] + ['psi1': it[2]] }

//     ch_suppa_local_contrasts = ch_suppa_local_contrasts
//         .map { it -> [it['control'], it] }
//         .combine ( ch_suppa_psi_conditions, by: 0 )
//         .map { it -> it[1] + ['psi2': it[2]] }

//     // Create input channels to diffsplice process

//     ch_split_suppa_tpms = ch_suppa_local_contrasts.map { [ it.treatment, it.control, it.tpm1, it.tpm2 ] }

//     ch_split_suppa_local_psi = ch_suppa_local_contrasts.map { [ it.treatment, it.control, it.psi1, it.psi2 ] }


// //DIFFSPLICE_IOE (YRI-GBR)  
//     DIFFSPLICE_IOE(
//         GENERATE_EVENTS_IOE.out.events,
//         ch_split_suppa_tpms,
//         ch_split_suppa_local_psi,
//         prefix,
//         diffsplice_method,
//         diffsplice_area,
//         diffsplice_lower_bound,
//         diffsplice_alpha,
//         diffsplice_tpm_threshold,
//         diffsplice_nan_threshold,
//         diffsplice_gene_correction,
//         diffsplice_paired,
//         diffsplice_median
//     )


//             ch_dpsi_local     = DIFFSPLICE_IOE.out.dpsi
//             ch_psivec_local   = DIFFSPLICE_IOE.out.psivec


// //CLUSTERGROUPS_IOE (YRI-GBR)    

//     CLUSTERGROUPS_IOE ( ch_psivec_local )
// ch_groups_ioe = CLUSTERGROUPS_IOE.out

// //CLUSTEREVENTS_IOE (YRI-GBR)    
//     CLUSTEREVENTS_IOE(
//         ch_dpsi_local,
//         ch_psivec_local,
//         ch_groups_ioe,
//         prefix,
//         clusterevents_dpsithreshold,
//         clusterevents_eps,
//         clusterevents_metric,
//         clusterevents_min_pts,
//         clusterevents_method,
//         clusterevents_sigthreshold,
//         clusterevents_separation
//     )

//     ch_cluster_vec_local   = CLUSTEREVENTS_IOE.out.clustvec
//     ch_cluster_log_local   = CLUSTEREVENTS_IOE.out.cluster_log

// // GENERATE_EVENTS_IOI (genes_chrX.gtf)

//     file_type = 'ioi'

//     GENERATE_EVENTS_IOI (
//         ch_gtf,
//         file_type,
//         generateevents_boundary,
//         generateevents_threshold,
//         generateevents_exon_length,
//         generateevents_event_type,
//         generateevents_pool_genes
//     )


//    ch_ioi_events = GENERATE_EVENTS_IOI.out.events


// //PSIPERISOFORM (suppa_tpm.txt)  
//     PSIPERISOFORM (
//         ch_gtf,
//         ch_tpm
//     )

//     ch_suppa_isoform_psi = PSIPERISOFORM.out.psi


// //SPLIT_FILES_IOI (suppa_isoform.psi) 

// output_type = ".psi"
// calc_ranges = true
// prefix = "transcript"

//     SPLIT_FILES_IOI (
//         PSIPERISOFORM.out.psi,
//         ch_samplesheet,
//         output_type,
//         calc_ranges,
//         prefix
//     )

//     ch_split_suppa_isoform_psi = SPLIT_FILES_IOI.out.psis

// //DIFFSPLICE_IOI (YRI-GBR)  

//     DIFFSPLICE_IOI(
//         ch_ioi_events,
//         ch_split_suppa_tpms,
//         ch_split_suppa_isoform_psi,
//         prefix,
//         diffsplice_method,
//         diffsplice_area,
//         diffsplice_lower_bound,
//         diffsplice_alpha,
//         diffsplice_tpm_threshold,
//         diffsplice_nan_threshold,
//         diffsplice_gene_correction,
//         diffsplice_paired,
//         diffsplice_median
//     )


// RMATS (
//                 ch_contrastsheet,
//                 ch_genome_bam_conditions,
//                 PREPARE_GENOME.out.gtf,
//                 is_single_condition,
//                 params.rmats_read_len,
//                 params.rmats_splice_diff_cutoff,
//                 params.rmats_novel_splice_site,
//                 params.rmats_min_intron_len,
//                 params.rmats_max_exon_len,
//                 params.rmats_paired_stats
//             )

//             ch_versions = ch_versions.mix(RMATS.out.versions)
